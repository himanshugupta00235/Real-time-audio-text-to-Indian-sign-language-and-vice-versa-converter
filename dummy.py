# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VUHzd6ustlzjTZ3H82-KOYtedi3KaYBq
"""
import whisper
import os
# from IPython.display import display  # Uncomment if running in IPython environment like Jupyter or Colab

# Load the Whisper model
model = whisper.load_model("base")

# Transcribe the audio file
result = model.transcribe("/Users/jayantgoel/PycharmProjects/audio1.wav")

# Print the transcribed text
print("Transcribed Text:", result["text"])


import re
from PIL import Image
import pickle

# Step 1: Create a dictionary to map English alphabets to ISL image paths
alphabet_to_isl_image = {
    'a': '/Users/jayantgoel/PycharmProjects/Indian/A/0.jpg',
    'b': '/Users/jayantgoel/PycharmProjects/Indian/B/1.jpg',
    'c': '/Users/jayantgoel/PycharmProjects/Indian/C/2.jpg',
    'd': '/Users/jayantgoel/PycharmProjects/Indian/D/3.jpg',
    'e': '/Users/jayantgoel/PycharmProjects/Indian/E/4.jpg',
    'f': '/Users/jayantgoel/PycharmProjects/Indian/F/5.jpg',
    'g': '/Users/jayantgoel/PycharmProjects/Indian/G/6.jpg',
    'h': '/Users/jayantgoel/PycharmProjects/Indian/H/7.jpg',
    'i': '/Users/jayantgoel/PycharmProjects/Indian/I/8.jpg',
    'j': '/Users/jayantgoel/PycharmProjects/Indian/J/9.jpg',
    'k': '/Users/jayantgoel/PycharmProjects/Indian/K/10.jpg',
    'l': '/Users/jayantgoel/PycharmProjects/Indian/L/11.jpg',
    'm': '/Users/jayantgoel/PycharmProjects/Indian/M/12.jpg',
    'n': '/Users/jayantgoel/PycharmProjects/Indian/N/13.jpg',
    'o': '/Users/jayantgoel/PycharmProjects/Indian/O/14.jpg',
    'p': '/Users/jayantgoel/PycharmProjects/Indian/P/15.jpg',
    'q': '/Users/jayantgoel/PycharmProjects/Indian/Q/16.jpg',
    'r': '/Users/jayantgoel/PycharmProjects/Indian/R/17.jpg',
    's': '/Users/jayantgoel/PycharmProjects/Indian/S/18.jpg',
    't': '/Users/jayantgoel/PycharmProjects/Indian/T/19.jpg',
    'u': '/Users/jayantgoel/PycharmProjects/Indian/U/20.jpg',
    'v': '/Users/jayantgoel/PycharmProjects/Indian/V/21.jpg',
    'w': '/Users/jayantgoel/PycharmProjects/Indian/W/22.jpg',
    'x': '/Users/jayantgoel/PycharmProjects/Indian/X/23.jpg',
    'y': '/Users/jayantgoel/PycharmProjects/Indian/Y/24.jpg',
    'z': '/Users/jayantgoel/PycharmProjects/Indian/Z/25.jpg',
    ' ': '/Users/jayantgoel/PycharmProjects/SIH/static/Image.jpg'
    # Add paths for all alphabet letters
}

# Step 2: Function to preprocess text by removing punctuation and tokenizing into words
def preprocess_text_to_words(sentence):
    # Remove punctuation marks
    sentence = re.sub(r'[^\w\s]', '', sentence)
    # Convert to lowercase for consistency
    sentence = sentence.lower()
    # Split the sentence into words
    return sentence.split()
# Step 3: Function to preprocess each word into letters
def preprocess_word_to_letters(word):
    return list(word)

# Step 2: Function to preprocess text by removing punctuation and tokenizing into letters
def preprocess_text_to_letters(sentence):
    # Remove punctuation marks
    sentence = re.sub(r'[^\w\s]', '', sentence)
    # Convert to lowercase for consistency
    sentence = sentence.lower()
    # Remove spaces and return list of letters
    return list(sentence.replace(' ', ''))

# Step 3: Function to map letters to corresponding ISL images
def map_to_isl(letters):
    # Map each letter to the corresponding ISL image path
    return [alphabet_to_isl_image.get(letter, 'path_to_images/default.jpg') for letter in letters]

# Step 4: Function to create a blank spacer image for separating words
def create_spacer(height, width=30):
    # Create a blank (white) image with the given height and width
    return Image.new('RGB', (width, height), color='white')

# Step 4: Function to display all ISL images in one window
def display_images_in_one_window(image_paths):
    # Load all images from the paths
    images = [Image.open(path) for path in image_paths]

    # Get the width and height of each image (assuming all images have the same size)
    widths, heights = zip(*(img.size for img in images))

    # Create a blank canvas large enough to hold all the images in a row
    total_width = sum(widths)
    max_height = max(heights)

    # Create a blank image (canvas)
    combined_image = Image.new('RGB', (total_width, max_height))

    # Paste each image onto the blank canvas sequentially
    x_offset = 0
    for img in images:
        combined_image.paste(img, (x_offset, 0))
        x_offset += img.width  # Move the x_offset to the right

    # Display the combined image
    # resultimage = combined_image
    combined_image.save('static/output.jpg')

# # Step 4: Function to create a blank spacer image for separating words
# def create_spacer(height, width=30):
#     # Create a blank (white) image with the given height and width
#     return Image.new('RGB', (width, height), color='white')

# Step 7: Putting everything together
def convert_text_to_isl(sentence):
    # Preprocess the sentence into words
    words = preprocess_text_to_words(sentence)

    # List to store all image paths (including spacers)
    all_images = []

    # Process each word
    for word in words:
        # Preprocess the word into letters
        letters = preprocess_word_to_letters(word)
        # Map the letters to corresponding ISL images
        isl_images = map_to_isl(letters)
        # Add the ISL images for the word to the main list
        all_images.extend(isl_images)
        # Add a spacer after each word (except the last one)
        if word != words[-1]:
            spacer = create_spacer(height=100)  # Assuming image height is 100
            all_images.append(spacer)

    # Display all the ISL images (and spacers) in one window
    display_images_in_one_window(all_images)

# Example usage
# input_text = input("Enter a sentence: ")
# convert_text_to_isl(input_text)

convert_text_to_isl(result["text"])

# pickle.dump(alphabet_to_isl_image, open('alphabet.pkl', 'wb'))
# model = pickle.load(open('model.pkl', 'rb'))